@{
    Layout = "~/Areas/Generate/Views/Generate/Input.cshtml";
}

<div class="row">
    <div class="col-md-12 form-group">
        <label>命名空間</label>
        <input type="text" class="form-control" name="Namespace" />
    </div>
    <div class="col-md-12 form-group">
        <label>類別名稱</label>
        <input type="text" class="form-control" name="ClassName" />
    </div>
    <div class="col-md-12 form-group">
        <label>注入類型</label>
        <table class="table">
            <thead>
                <tr>
                    <td>
                        <input type="text" class="form-control form-control-sm" id="text-inject-type" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-success btn-sm" onclick="addInjectType();"><i class="fas fa-plus"></i></button>
                    </td>
                </tr>
            </thead>
            <tbody class="tbody-inject-types">
                @helper RenderInjectType(string injectType)
                {
                    Guid guid = Guid.NewGuid();
                    <tr>
                        <td>
                            <input type="hidden" name="InjectTypeOptions" value="@injectType" />
                            <input type="checkbox" class="ml-3" id="@guid" name="InjectTypes" value="@injectType" />
                            <label for="@guid">@injectType</label>
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm" onclick="deleteInjectType(this);"><i class="fas fa-trash-alt"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script type="text/javascript">
    function addInjectType(injectType) {
        if (arguments.length == 0) {
            injectType = $("#text-inject-type").val();
            if (injectType == "") {
                UI.notice("請輸入類型名稱", "warning");
                return;
            }
        }
        return UI.render.razorHelper("", "RenderInjectType", injectType)
            .then(function (rendered) {
                $(".tbody-inject-types").append(rendered);
                $("#text-inject-type").val("");
            });
    }
    function deleteInjectType(elem) {
        $(elem).closest("tr").remove();
    }

    function overrideSetRequestAsync(request) {
        $(".tbody-inject-types").empty();
        var promise = Promise.resolve();
        request.filter(function (x) {
            return x.name == "InjectTypeOptions";
        }).forEach(function (x) {
            promise = promise.then(function () {
                return addInjectType(x.value);
            });
        });
        promise.then(function () {
            defaultSetRequestAsync(request);
        });
    }
</script>